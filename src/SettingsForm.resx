<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACh
        QmQAoUP4AKFD+AChQ/gAoUP4AKFD+AChQ/gAoUP4AKFD+AChQ/gAoUP4AKFD+ACiQl0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAKJCaAChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKJCYAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAokJoAKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AokJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACiQmgAoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wCiQmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFDVwChQ9gAoUPYAKFD9AChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKJCYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAL9ABACfQBAAn0AQAJ9AEACfQBAAn0AQAJ9AEACfQBAAoUK8AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUONAP8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAKRJDgCgQ4kAoUPrAKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AokPwAKFDuwCiQTcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAokNzAKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/ACh
        RGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgQ9UAoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD9ACiRiEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBD6AChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFCdwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoEPoAKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP9AKFDxwChQsAAoULAAKFCwAChQsAAoULAAKFCwACh
        QsAAoULAAKFCwAChQsAAoULAAKBD6AChQ/8AoUKpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACg
        Q+gAoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD+ACjQCQAnkQiAJ9FMACfRTAAn0UwAJ9FMACf
        RTAAn0UwAJ9FMACfRTAAn0UwAJ9AGACAgAIAnU4NAKFDuAChQ7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAKFD6QChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoEOyAKBBKwChQ+QAoEPoAKBD6ACg
        Q+gAoEPoAKBD6ACgQ+gAoEPoAKBD6ACgQ+gAokJoAKJCaAChRIgAoEReAKFDuAAAAAAAAAAAAAAAAAAA
        AAAAoUR1AKFDkAChQ6gAoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCiQ8oAqkAMAKpVBgD/
        AAEAn0AIAJ9ACACfQAgAn0AIAJ9ACACfQAgAn0AIAJ9ACACfQAgAoUSiAKFDmACiQ1gAoUO4AAAAAAAA
        AAAAAAAAAAAAAAChQ40AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUPQAJ9AIAChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUOYAKJDWACh
        Q7gAAAAAAAAAAAAAAAAAAAAAAKFDOQChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ9AAn0AgAKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q5gAokNYAKFDuAAAAAAAAAAAAAAAAAAAAAAA/wABAKFD4gChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD0ACfQCAAoUPxAJ9AGACfQBgAn0AYAJ9AGACfQBgAn0AYAJ9AGACf
        QBgAoESEAKFDmACiQ1gAoUO4AAAAAAAAAAAAAAAAAAAAAAAAAAAAoESPAKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUPQAJ9AIAChQ/0AoUPQAKFD0AChQ9AAoUPQAKFD0ACh
        Q9AAoUPQAKFD0AChQ+YAoUOYAKJDWAChQ7gAAAAAAAAAAAAAAAAAAAAAAAAAAACjQjoAoUP/AKFD/wCh
        Q+MAoEN5AKFDcgChRNsAoUP/AKFD/wChQ/8AoUP/AKFD/wChQ9AAn0AgAKFD9ACfREAAn0RAAJ9EQACf
        REAAn0RAAJ9EQACfREAAn0RAAKFCmgChQ5gAokNYAKFDuAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAQCh
        Q+QAoUP9AKJGIQChQ3IAoUN9AJ5JFQChQ/YAoUP/AKFD/wChQ/8AoUP/AKFD0ACfQCAAoUP7AKFDsACh
        Q7AAoUOwAKFDsAChQ7AAoUOwAKFDsAChQ7AAoEPVAKFDmACiQ1gAoUO4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAKFDkAChQ9gAoEJ0AKFD/wChQ/8AoUSAAKFEzAChQ/8AoUP/AKFD/wChQ/8AoUPQAJ9AIACh
        Q/YAokJoAKJCaACiQmgAokJoAKJCaACiQmgAokJoAKJCaACgQ68AoUOYAKJDWAChQ7gAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAokQ8AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q9AAn0AgAKFD+AChRIgAoUSIAKFEiAChRIgAoUSIAKFEiAChRIgAoUSIAKFCwAChQ5gAokNYAKFDuAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAEAoUPlAKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD0ACfQCAAoUP4AKFEiAChRIgAoUSIAKFEiAChRIgAoUSIAKFEiAChRIgAoULAAKFDmACi
        Q1gAoUO4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChQpIAoUP/AKFD/wChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUPQAJ9AIAChQ/YAokJoAKJCaACiQmgAokJoAKJCaACiQmgAokJoAKJCaACg
        Q68AoUOYAKJDWAChQ7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKNAJAChQ/kAoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ9AAn0AgAKFD+wChQ7AAoUOwAKFDsAChQ7AAoUOwAKFDsACh
        Q7AAoUOwAKBD1QChQ5gAokNYAKFDuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFEiACh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD0ACfQCAAoUP0AJ9EQACfREAAn0RAAJ9EQACf
        REAAn0RAAJ9EQACfREAAoUKaAKFDmACiQkIAoUOKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAqkAMAKFD1AChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUPQAJ9AIAChQ/8AoUP/AKFD/wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUOYAJ9AEACeRCIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAnEcSAKFDxwChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ+QApDcOAKFD0QCg
        Q+gAoEPoAKBD6ACgQ+gAoEPoAKBD6ACgQ+gAoEPoAKBD6ACgQ4kAoURPAKFEgAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAokYLAKFCkgChQ/cAoUP/AKFD/wChQ/8AoUP/AKFD/wCi
        QnsAn0AQAJJJBwCSSQcAkkkHAJJJBwCSSQcAkkkHAJJJBwCSSQcAkkkHAJJJBwCSSQcAv0AEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9AGAChQ4UAoUK8AKFD4wCh
        Q/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP/AKFD/wChQ/8AoUP9AKBDwgCi
        RhYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAJkzBQCfQAgAn0AIAJ9ACACfQAgAn0AIAJ9ACACfQAgAn0AIAJ9ACACfQAgAn0AIAJ9ACACZ
        MwUAAAAAAAAAAAAAAAAAAAAA///////wAH//8AB///AAf//wAH//8AB//gAAP/gAAA/4AAAH+AAAA/gA
        AAP4AAAD+AAAA/gAAAPAAAADwAAAA8AAAAPAAAAD4AAAA+AAAAPgAAAD8AAAA/AAAAPwAAAD+AAAA/gA
        AAP8AAAD/AAAA/4AAAP/AAAD/8AAA//8AA8=
</value>
  </data>
</root>